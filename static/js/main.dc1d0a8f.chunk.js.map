{"version":3,"sources":["assets/loadingcat.jpg","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Loading.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","cardsArray","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Loading","require","Scroll","props","style","overflow","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,wC,8ECYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE3B,OACE,yBAAKC,UAAU,kDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,cACpD,6BACE,4BAAKL,GACL,2BAAIC,MCQGK,EAdE,SAAC,GAAgB,IAC1BC,EADyB,EAAbC,OACQC,KAAI,SAACC,GAC7B,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAMR,GACXA,GAAIQ,EAAMR,GACVF,KAAMU,EAAMV,KACZC,MAAOS,EAAMT,WAInB,OAAO,yBAAKE,UAAU,OAAOI,ICMhBK,EAlBG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAMnB,OACE,yBAAKV,UAAU,WACb,2BACEA,UAAU,gEACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCIHI,G,MAhBC,WACd,OACE,yBAAKd,UAAU,0DACb,yBAAKA,UAAU,MACb,yBACEC,IAAKc,EAAQ,IACbf,UAAU,sCACVE,IAAI,YAEN,wBAAIF,UAAU,UAAd,cACA,wBAAIA,UAAU,mBAAd,wCCHOgB,EANA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,WAAaH,EAAMI,WCiBlDC,E,kDAnBb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAU,GAHA,E,8DAMIC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,uBAAGxB,UAAU,QAAb,gCAEA2B,KAAKV,MAAMI,a,GAfGQ,aC6DZC,E,kDApDb,aAAe,IAAD,8BACZ,gBAgBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAhB1C,EAAKZ,MAAQ,CACXlB,OAAQ,GACR4B,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CAEHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKZ,SAAS,CAAEvB,OAAQmC,S,+BASnC,IAAD,EACyBb,KAAKJ,MAA7BlB,EADD,EACCA,OAAQ4B,EADT,EACSA,YACVQ,EAAiBpC,EAAOqC,QAAO,SAACnC,GACpC,OAAOA,EAAMV,KAAK8C,cAAcC,SAASX,EAAYU,kBAIvD,OAAKtC,EAAOwC,OAQR,yBAAK7C,UAAU,UACb,2CACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWU,aAAciB,KAAKI,kBAEhC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1B,OAAQoC,OAbxB,yBAAKzC,UAAU,UACb,kBAAC,EAAD,W,GAhCQ6B,aCAlBiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SRyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,c","file":"static/js/main.dc1d0a8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loadingcat.2ff03bf0.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"; // for JSX format\n\nconst Card = ({ name, email, id }) => {\n  //   const { name, email, id } = props;\n  return (\n    <div className=\"bg-washed-red dib br3 pa3 ma2 shadow-5 tc grow\">\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"Jane Done\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  const cardsArray = robots.map((robot) => {\n    return (\n      <Card\n        key={robot.id}\n        id={robot.id}\n        name={robot.name}\n        email={robot.email}\n      />\n    );\n  });\n  return <div className=\"mt5\">{cardsArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  // test if ErrorBoundry works\n  // if (true) {\n  //   throw new Error(\"Service unavailable.\");\n  // }\n\n  return (\n    <div className=\"pa2 mb3\">\n      <input\n        className=\"blue pa3 ba b--washed-blue b shadow-2 br4 outline-transparent\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={searchChange}\n      ></input>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Loading = () => {\n  return (\n    <div className=\"mw5 center bg-white br3 pa3 pa4-ns mv6 ba b--black-10 \">\n      <div className=\"tc\">\n        <img\n          src={require(\"../assets/loadingcat.jpg\")}\n          className=\"br-100 h4 w4 dib ba b--black-05 pa2\"\n          alt=\"Loading\"\n        />\n        <h1 className=\"f3 mb2\">Loading...</h1>\n        <h2 className=\"f5 fw4 gray mt0\">Sorry for keeping you waiting...</h2>\n      </div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\n\n// Children\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: \"scroll\", height: \"1000px\" }}>{props.children}</div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false,\n    };\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <p className=\"grey\">Oops Something went wrong...</p>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\n// import { robots } from \"./robots\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\nimport Loading from \"../components/Loading\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n// Smart Component -> state\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      // fetch -> to make requests to the server\n      .then((response) => response.json())\n      .then((users) => this.setState({ robots: users }));\n  }\n  // every time the state changes, we run render() again.\n\n  // if this is self-defined methods, you need to use this syntax\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n\n    // if robots are loading too slow\n    if (!robots.length) {\n      return (\n        <div className=\"tc ma5\">\n          <Loading />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"tc ma5\">\n          <h1>RoboFriends</h1>\n          <ErrorBoundry>\n            <SearchBox searchChange={this.onSearchChange} />\n          </ErrorBoundry>\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\"; //component\n//it can be './App.js', if you don't specify, the default is .js file\nimport * as serviceWorker from \"./serviceWorker\";\n// for pwa\nimport \"tachyons\";\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}